document.addEventListener("DOMContentLoaded", () => {
  // Valitaan DOM-elementit vuorovaikutusta varten
  const cityInput = document.getElementById("city"); // Sy√∂tekentt√§ kaupungin nimelle
  const getForecastButton = document.getElementById("get-forecast"); // Painike, joka hakee s√§√§ennusteen
  const forecastDiv = document.getElementById("forecast"); // Div-elementti s√§√§ennusteen n√§ytt√§miseksi
  const apiKey = "6ddc93fbc7d0c4a2941a17cf6dbbba37"; // Korvaa t√§m√§ omalla OpenWeatherMap API-avaimellasi
  // Lis√§t√§√§n klikkaustapahtuma painikkeeseen
  getForecastButton.addEventListener("click", getWeatherForecast);

  // Funktio, joka hakee ja n√§ytt√§√§ s√§√§ennusteen
  function getWeatherForecast() {
    const city = cityInput.value.trim(); // Haetaan kaupungin nimi sy√∂tekent√§st√§
    // Varmistetaan, ett√§ kaupunkikentt√§ ei ole tyhj√§
    if (!city) {
      forecastDiv.innerHTML = "<p>Sy√∂t√§ kaupungin nimi.</p>";
      return;
    }
    // Haetaan s√§√§dataa OpenWeatherMap API:sta
    fetch(
      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&cnt=40&appid=${apiKey}`
    )
      .then((response) => response.json())
      .then((data) => {
        // Tarkistetaan, l√∂ytyik√∂ kaupunki
        if (data.cod !== "200") {
          forecastDiv.innerHTML =
            "<p>Kaupunkia ei l√∂ytynyt. Yrit√§ uudelleen.</p>";
          return;
        }
        // N√§ytet√§√§n s√§√§ennustedata
        displayForecast(data);
      })
      .catch((error) => {
        console.error("Virhe haettaessa s√§√§tietoja:", error);
        forecastDiv.innerHTML =
          "<p>Virhe s√§√§tietojen haussa. Yrit√§ my√∂hemmin uudelleen.</p>";
      });
  }

  // Funktio, joka n√§ytt√§√§ s√§√§ennusteen k√§ytt√∂liittym√§ss√§
  function displayForecast(data) {
    forecastDiv.innerHTML = ""; // Tyhjennet√§√§n edellinen s√§√§ennuste
    const forecastList = data.list;
    for (let i = 0; i < forecastList.length; i += 8) {
      // Haetaan ennuste joka p√§iv√§lt√§ (joka 24 tunnin v√§lein)
      const forecast = forecastList[i];
      const date = new Date(forecast.dt * 1000); // Muutetaan UNIX-aikaleima p√§iv√§m√§√§r√§ksi
      const day = date.toLocaleDateString(undefined, { weekday: "long" });
      // Muotoillaan p√§iv√§m√§√§r√§ viikonp√§iv√§ksi
      const temp = forecast.main.temp; // Haetaan l√§mp√∂tila
      const weather = forecast.weather[0].description; // Haetaan s√§√§n kuvaus

      // M√§√§ritet√§√§n sopiva emoji s√§√§n kuvauksen perusteella
      let weatherEmoji = "";
      if (weather.includes("clear")) {
        weatherEmoji = "‚òÄÔ∏è"; // Selke√§ s√§√§
      } else if (weather.includes("clouds")) {
        weatherEmoji = "‚òÅÔ∏è"; // Pilvinen s√§√§
      } else if (weather.includes("rain")) {
        weatherEmoji = "üåßÔ∏è"; // Sateinen s√§√§
      } else if (weather.includes("thunderstorm")) {
        weatherEmoji = "‚õàÔ∏è"; // Ukkosmyrsky
      } else if (weather.includes("snow")) {
        weatherEmoji = "‚ùÑÔ∏è"; // Lumisade
      } else if (weather.includes("mist") || weather.includes("fog")) {
        weatherEmoji = "üå´Ô∏è"; // Sumu
      } else {
        weatherEmoji = "üå§Ô∏è"; // Yleisesti hyv√§ s√§√§
      }

      // Luodaan uusi div jokaisen p√§iv√§n ennusteelle
      const forecastDayDiv = document.createElement("div");
      forecastDayDiv.classList.add("forecast-day");
      forecastDayDiv.innerHTML = `
        <h2>${day}</h2>
        <p>L√§mp√∂tila: ${temp}¬∞C</p>
        <p>S√§√§: ${weatherEmoji} ${weather}</p>
      `;
      // Lis√§t√§√§n ennuste-elementti p√§√§ennustekontaineriin
      forecastDiv.appendChild(forecastDayDiv);
    }
  }
});
